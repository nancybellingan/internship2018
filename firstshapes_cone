/     
  // Shape 1
  //  
  G4Material* shape1_mat = nist->FindOrBuildMaterial("G4_A-150_TISSUE");
  G4ThreeVector pos1 = G4ThreeVector(0, 2*cm, -7*cm);

  // Conical section shape       
  G4double shape1_rmina =  1.*cm, shape1_rmaxa = 1.5*cm;
  G4double shape1_rminb =  2.5*cm, shape1_rmaxb = 3.*cm;
  G4double shape1_hz = 2.*cm;
  G4double shape1_phimin = 0.*deg, shape1_phimax = 300.*deg;
  G4Cons* solidShape1 =
    new G4Cons("Shape1",
    shape1_rmina, shape1_rmaxa, shape1_rminb, shape1_rmaxb, shape1_hz,
    shape1_phimin, shape1_phimax);

  G4LogicalVolume* logicShape1 =
    new G4LogicalVolume(solidShape1,         //its solid
                        shape1_mat,          //its material
                        "Shape1");           //its name

  G4double phi = 45;  // angle for vertical rotation, around z axis
  G4double alpha = 45; //angle for horizontal rotation, around y axis
  G4RotationMatrix rotm  = G4RotationMatrix();
  rotm.rotateY(alpha*deg);
  rotm.rotateZ(phi*deg);
  G4ThreeVector uz = G4ThreeVector(std::cos(phi),  std::sin(phi),0.);
  G4ThreeVector position = uz;
  G4Transform3D transform = G4Transform3D(rotm,position);

  new G4PVPlacement(transform,                       //no rotation
                    logicShape1,             //its logical volume
                    "Shape1",                //its name
                    logicEnv,                //its mother  volume
                    false,                   //no boolean operation
                    0,                       //copy number
checkOverlaps); //overlaps checking 
